import sequelize from "../database";
import Setting from "../models/Setting";

const testCompletionMessage = async () => {
  try {
    console.log("üß™ Testando configura√ß√£o de mensagem de finaliza√ß√£o...");
    
    // Verificar configura√ß√£o atual
    const userRatingSetting = await Setting.findOne({
      where: {
        companyId: 1,
        key: "userRating"
      }
    });

    console.log(`üìã Configura√ß√£o userRating atual: ${userRatingSetting?.value || 'N√ÉO ENCONTRADA'}`);

    if (userRatingSetting?.value === "disabled") {
      console.log("‚úÖ CONFIGURA√á√ÉO CORRETA:");
      console.log("   - userRating: disabled");
      console.log("   - Resultado esperado: NENHUMA mensagem ser√° enviada ao finalizar ticket");
      console.log("   - Nem avalia√ß√£o, nem mensagem de finaliza√ß√£o");
    } else if (userRatingSetting?.value === "enabled") {
      console.log("‚úÖ CONFIGURA√á√ÉO CORRETA:");
      console.log("   - userRating: enabled");
      console.log("   - Resultado esperado: Mensagem de avalia√ß√£o E mensagem de finaliza√ß√£o ser√£o enviadas");
    } else {
      console.log("‚ö†Ô∏è CONFIGURA√á√ÉO N√ÉO ENCONTRADA:");
      console.log("   - Criando configura√ß√£o padr√£o (disabled)...");
      
      await Setting.findOrCreate({
        where: {
          companyId: 1,
          key: "userRating"
        },
        defaults: {
          companyId: 1,
          key: "userRating",
          value: "disabled"
        }
      });
      
      console.log("‚úÖ Configura√ß√£o criada: userRating = disabled");
    }

    console.log("\nüîß Para testar:");
    console.log("1. Finalize um ticket");
    console.log("2. Verifique se NENHUMA mensagem √© enviada ao cliente");
    console.log("3. Para habilitar: v√° em /settings > Op√ß√µes e ative 'Enviar avalia√ß√µes'");

  } catch (error) {
    console.error("‚ùå Erro no teste:", error);
  } finally {
    await sequelize.close();
  }
};

testCompletionMessage();