import "../database"; // Inicializar conex√£o com banco
import { logger } from "../utils/logger";
import { getWbot } from "../libs/wbot";
import Whatsapp from "../models/Whatsapp";

const checkWhatsAppConnection = async () => {
  try {
    logger.info("üîç Verificando conex√µes WhatsApp...");

    // Buscar todas as conex√µes WhatsApp
    const whatsapps = await Whatsapp.findAll({
      order: [['id', 'ASC']]
    });

    if (whatsapps.length === 0) {
      logger.warn("‚ö†Ô∏è Nenhuma conex√£o WhatsApp encontrada");
      process.exit(1);
    }

    logger.info(`üì± Encontradas ${whatsapps.length} conex√µes WhatsApp`);

    for (const whatsapp of whatsapps) {
      logger.info(`\nüîç Verificando conex√£o: ${whatsapp.name} (ID: ${whatsapp.id})`);
      logger.info(`üìä Status no banco: ${whatsapp.status}`);
      logger.info(`üè¢ Empresa: ${whatsapp.companyId}`);

      try {
        const wbot = getWbot(whatsapp.id);
        
        if (!wbot) {
          logger.error(`‚ùå Bot n√£o encontrado para conex√£o ${whatsapp.id}`);
          continue;
        }

        // Verificar se o bot tem usu√°rio conectado
        if (wbot.user) {
          logger.info(`‚úÖ Bot conectado: ${wbot.user.id}`);
          logger.info(`üë§ Nome: ${wbot.user.name || 'N/A'}`);
          
          // Testar conectividade b√°sica
          try {
            const state = wbot.ws?.readyState;
            logger.info(`üåê WebSocket State: ${state} (1=OPEN, 0=CONNECTING, 2=CLOSING, 3=CLOSED)`);
            
            if (state === 1) {
              logger.info(`üü¢ Conex√£o WebSocket ativa`);
              
              // Testar uma opera√ß√£o simples
              try {
                await Promise.race([
                  wbot.fetchStatus(wbot.user.id),
                  new Promise((_, reject) => 
                    setTimeout(() => reject(new Error("Timeout")), 10000)
                  )
                ]);
                logger.info(`‚úÖ Teste de conectividade passou`);
              } catch (testError) {
                logger.warn(`‚ö†Ô∏è Teste de conectividade falhou: ${testError.message}`);
              }
            } else {
              logger.warn(`üü° WebSocket n√£o est√° aberto`);
            }
          } catch (wsError) {
            logger.warn(`‚ö†Ô∏è Erro ao verificar WebSocket: ${wsError.message}`);
          }
        } else {
          logger.warn(`üü° Bot n√£o tem usu√°rio conectado`);
        }

      } catch (error: any) {
        logger.error(`‚ùå Erro ao verificar bot ${whatsapp.id}: ${error.message}`);
      }
    }

    // Verificar conex√µes ativas
    const activeConnections = whatsapps.filter(w => w.status === "CONNECTED");
    const inactiveConnections = whatsapps.filter(w => w.status !== "CONNECTED");

    logger.info(`\nüìä Resumo:`);
    logger.info(`‚úÖ Conex√µes ativas: ${activeConnections.length}`);
    logger.info(`‚ùå Conex√µes inativas: ${inactiveConnections.length}`);

    if (activeConnections.length === 0) {
      logger.error(`üö® PROBLEMA: Nenhuma conex√£o WhatsApp ativa!`);
      logger.info(`üí° Solu√ß√µes:`);
      logger.info(`   1. Verifique se o QR Code foi escaneado`);
      logger.info(`   2. Reconecte o WhatsApp na interface`);
      logger.info(`   3. Verifique a conex√£o com a internet`);
      logger.info(`   4. Reinicie o servidor se necess√°rio`);
    }

    process.exit(0);
  } catch (error) {
    logger.error(error, "‚ùå Erro ao verificar conex√µes WhatsApp");
    process.exit(1);
  }
};

// Executar o script se chamado diretamente
if (require.main === module) {
  checkWhatsAppConnection();
}

export default checkWhatsAppConnection;